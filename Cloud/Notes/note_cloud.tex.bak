%\listfiles
\documentclass[a4paper,12pt,twoside]{article}

%%--------------------------------------------------------------------------------------------------------------------------------
%% packages
\usepackage[french]{babel}
\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}
\usepackage{amsmath,amssymb,mathrsfs} 
%\usepackage{import}
\usepackage{float, subfig, caption}
\usepackage{libertine}
\usepackage{fancybox}
\usepackage{graphicx}
\usepackage{xcolor} %/ pour \Definecolor
\usepackage[pdftex,final=true]{hyperref}
%\usepackage[]{hyperref}
\hypersetup{
colorlinks=true,
linkcolor=blue,
urlcolor=magenta, %/ file: adopte également cette couleur
filecolor=cyan, % ne fonctionne qu'avec run:, 
%citecolor=red
}
\urlstyle{same}
\usepackage[french]{minitoc}
\usepackage[acronym,toc,automake]{glossaries} % acronym pour les acronymes et toc pour inclusion des glossary dans la table des matières
\usepackage[left=2cm,right=2cm,top=2cm,bottom=2cm]{geometry}
%\usepackage{minted} % pour code avec coloration dans le texte
\usepackage{url} % Pour avoir de belles url
%% package ticks spécifiquement (pour les schémas) 
%\usepackage{tikz}%
%\usepackage[top=2cm,bottom=2cm]{geometry}
%% paramètres tikz
%\usetikzlibrary{patterns,decorations.pathreplacing,shapes.misc}
%\usetikzlibrary{calc}
%\tikzset{cross/.style={cross out, draw=black, minimum size=2*(#1-\pgflinewidth), inner sep=0pt, outer sep=0pt},
%default radius will be 1pt. 
%cross/.default={5pt}}
% \definecolor{Gray}{gray}{0.9}
% \definecolor{LightCyan}{rgb}{0.88,1,1}
% \newcommand{\RN}[1]{\textup{\uppercase\expandafter{\romannumeral#1}}}    

%%--------------------------------------------------------------------------------------------------------------------------------
%% Macros comme variable
%\newcommand{\editorpath}{C:/Program Files/Notepad++/notepad++.exe}
\newcommand{\exemplepath}{../Exercices}
\newcommand{\urlcolor}{magenta}  % couleur des liens https
\newcommand{\filecolor}{cyan} % couleur des liens file: file
\newcommand{\pdfcolor}{red} % couleur des liens file: .pdf
\newcommand{\foldercolor}{orange} % couleur des liens file: Folder
\newcommand{\cscolor}{green!60!black} % couleur des liens file: .cs
\newcommand{\slncolor}{violet} % couleur des liens file: .sln
\newcommand{\keycolor}{purple} % couleur des liens  de type mot clefs
%% Macros commun
\newcommand{\incode}[1]{{\footnotesize\ttfamily #1}} % pour du pseudo-code simple
\newcommand{\rem}[2]{\noindent\underline{Remarque} : \textit{#1}.\\ \indent #2}
\newcommand{\note}[1]{\noindent\underline{Note} : \\ \indent #1}
\newcommand{\defi}[2]{\noindent\underline{Définition} : \textbf{#1}.\\ \indent #2}
\newcommand{\slide}[2]{\textbullet ~ Slide n°#1 : \indent #2}
%% Macro spécifiques à ce fichier (pas forcément) : pour fonctionner il faut que le fichier ai été ouvert diretcement dans le dossier du .tex ...
\newcommand{\fileref}[2]{\hypersetup{urlcolor=\filecolor}\href{file: #1}{#2}\hypersetup{urlcolor=\urlcolor}}
\newcommand{\pdfref}[2]{\hypersetup{urlcolor=\pdfcolor}\href{file: #1.pdf}{#2.pdf}\hypersetup{urlcolor=\urlcolor}}
\newcommand{\csref}[2]{\hypersetup{urlcolor=\cscolor}\href{file:\exemplepath /#1.cs}{#2.cs}\hypersetup{urlcolor=\urlcolor}}
\newcommand{\slnref}[2]{\hypersetup{urlcolor=\slncolor}\href{file:\exemplepath /#1.sln}{#2.sln}\hypersetup{urlcolor=\urlcolor}}
\newcommand{\folderref}[2]{\hypersetup{urlcolor=\foldercolor}\href{file:\exemplepath /#1/.}{#2}\hypersetup{urlcolor=\urlcolor}}
\newcommand{\keyref}[2]{\hypersetup{urlcolor=\keycolor} \href{#1}{\textbf{#2}}\hypersetup{urlcolor=\urlcolor}}
\newcommand{\keyword}[3]{\noindent\underline{Mot clef} : \keyref{#1}{#2}. \\ \indent #3}
%% Macro spécifiques à ce fichier (pas forcément)
\newcommand{\dpat}[7]{
\noindent \underline{Pattern} : \textbf{#1}, \indent (type : \textit{#2}) \\
\underline{Description} : \indent #3 \\
\underline{Exemple} : \indent #4 \\
\noindent \underline{Avantages} : 
\begin{itemize}
 #5
\end{itemize}
\noindent \underline{Inconvénients} : 
\begin{itemize}
 #6 
\end{itemize}
\underline{Liens} : #7 
}

%%--------------------------------------------------------------------------------------------------------------------------------
%% Infos document
% Titre
\title{Notes sur le module : \textit{Cloud Natif}.}
% auteur
\author{Armel Pitelet}
% date de création du document
\date{\today}

%% Glossaire, acronymes et index
\makeglossaries

%%--------------------------------------------------------------------------------------------------------------------------------
%% Glossaire et acronyme (déclarations)

% DIP : exemple de formalisme
\newglossaryentry{gl-dip}{
name = {DSP},
description = {la description détaillé}
}
\newglossaryentry{ac-dip}{
type = \acronymtype, name = {DSP}, 
description = {Nom simple}, 
first = {Première occurence\glsadd{gl-dip}}, 
see = [Glossaire:]{gl-dip}
}


\begin{document}
%% Organisation globale 
\maketitle
\tableofcontents

%%--------------------------------------------------------------------------------------------------------------------------------
%% Contenue
\rem{Sur la dénomination Cloud}{Terme marketing.}\\

\rem{Sur internet}{Ensemble de réseaux qui se base sur des protocoles de communication (http, bas débit, ...). L'ensemble de ces protocoles fait internet qui est un système de communication (pas que le web). Le but premier est de transmettre de l'information via des protocole (irc pour le chat par exemple, smtp pour les mail,...).}\\

\rem{Sur la notion d'IP et l'histoire d'internet}{\textit{Internet protocol}. Le nom de version fait référence au nombre d'octet (ipv4 $\to$ 4 octets par adresse), ce qui fait un nombre important (4 milliards) mais limité d'ip. Sans adresse ip, pas de communication via internet(au sens large donc plus que juste le web). L'ipv6 est apparue pour balancer ce problème (6 octets par adresse).Début des 90 apparition du web : déblocage de l'accessibilité à l'information. Puis la partie mercantile apprait rapidemment. La notion de qualité logicielle apprait alors (aka un service qui fonctionne) et avec les fournisseurs de serveur (accès à internet)/service aka ceux qui possèdent l'infrastructure et les points de connexion. Puis la fibre succède au cable cuivre. Les technos (et marchand associés) sont de plus en plus dépendant de cette connexion.}\\

\note{NAT $\to$ Network Address Translation, PAT $\to$ Port Address Translation.}\\

\rem{Sur le \keyref{https://fr.wikipedia.org/wiki/Domain_Name_System}{DNS}}{Domain Name Service. Service distribué qui alias un ip avec un nom lisible humainement (et fait l'inverse également).}\\

\rem{Sur la notion de Cloud}{Il s'agit en fait de l'ébergement massif et centralisé de serveur destinée à la location. Contrairement à l'ancienne manière de faire le serveur n'est pas monté en physique chez un client mais est simplement loué prêt à l'emploi. Le Cloud fournit via API des ressources utilisables pour le déploiement d'une infrastructure. En générale les services Cloud sont des acronymes qui finissent en \textit{aas} (as a Service). Le Cloud se base sur la virtualisation : une machine physique est capable d'émuler une/plusieurs machines virtuelle(s).}\\

\rem{Iaas}{Infrastructure as a Service. C'est à dire le démarage d'une machine virtuelle par un Hyperviser (la machine physique qui fait tourner la machine virtuelle). On alloue ensuite de la RAM, du CPU, de la mémoire à ces machines virtuelles (dimensionnement du serveur).}\\

\rem{Sur la virtualisation}{Le gros interêt est de pouvoir déplacer des VM de serveur en serveur sans couper le service de VM en question. Autre point d'interêt : deux VM sont isolés l'une de l'autre (en terme de système, pas de réseaux).}\\

\rem{Faas}{Function as a service. Cette fois ci au lieu de déployer une application entière on ne déploie qu'une partie, une fonctionnalité (comme une base de donnée par exemple ou une fonction de traitement d'image).L'application se retrouve être un ensemble de fonctionnalité distribué à travers le Cloud. Cela évite d'avoir une machine (serveur) mobilisé en permanence.}\\

\rem{DNSaaS}{Principe du DNS mais avec la possibilité de rajouter des noms de domaines à la volé. Cela revient à mettre à disposition un serveur dns de manière dynamique.}\\

\rem{CaaS}{Container as a Service. Kubernetes par exemple. Docker est la technologie de containerisation et Kubernetes est le service de gestion de ces container.}\\

\rem{SaaS}{Software as a Service. Permet d'éviter le déploiement sur des machines d'un Software donné. Par exemple : gmail, github,...}\\

\rem{PaaS}{Platform as a Service. Contrairement à l'Iaas ou l'on à tt la machine virtuelle (avec installation et configuration à faire), le Paas met à disposition une plateforme déjà configurée, sécurisée, mise à jour, mise à l'échelle... pour faire tourner du code directement.}\\

\rem{NaaS}{Network as a Service. Permet de créer des réseaux virtuelle (pas forcément accessible de l'extérieur mais plus des réseaux internes).}\\

Au finale le principe du Cloud est d'automatisé tt ces services (depuis une interface). Il existe aussi du DBaaS, du VPNaaS, Maas (Metric as a Service pour des stats.)\\

\rem{Sur les Cloud publiques}{Ce sont des services de Cloud ouverts, qui centralise les services Cloud au sein d'une seule entreprise (AWS de Amazon, Azure de Microsoft, Ovh en france, Scaleway, Clever Cloud, Alibaba Cloud en Chine). Selon les localisation les loies sont différentes! Par exemple le Cloud Act américain permet au gouv US d'accéder aux données hébergées par une entreprise Américaine quel que soit l'endroit physique ou sont hébergées les données.}\\

\rem{Sur le Cloud Native}{Une application est dite Cloud Native si elle est concue dans l'idée de tourner dans le Cloud.}\\

\rem{Private Cloud}{Le Cloud n'est pas partagée, il est centralisé (infra et logiciel) chez le client. VMWare, Openstack (solution python open source), Proxmox (plus léger que le reste pour créer des VM à la demande/volée), Kubernetes.}\\

\rem{Hybrid Cloud}{L'idée est de séparer les services dans différents Cloud (provider de Cloud). Au lieu de tt centralisé, tt est décentralisé chez plusieurs providers.}\\

\rem{Le MulciCloud}{L'application est partagée sur plusieurs Cloud différents (chez différents Cloud providers).}\\

\rem{Sue les \keyref{https://12factor.net/}{12 factors}}{Un ensemble de bonne pratique qui permettent de définir une application comme \textit{Cloud Native Complient}. Voir \url{https://docs.microsoft.com/en-us/dotnet/architecture/cloud-native/definition} et ci dessous : 
\begin{enumerate}
\item Code Base : Il faut un code source partageable et versionné! (et disponible en remote). L'idée est d'avoir une démarche qualitative. Idéalement il faut même avoir une base de code par microservice (au moins un repos par application). De plus le code ne doit pas être dépendant de ou il doit être déployé (debug, release, local, ...).
\item Dependencies : Il faut garder à jour la liste des dépendances (via package manager : quelle lib, quelle version), les déclarer explicitement et les isoler (dans un fichier de descriptions des packages : .yaml, .json). Il ne faut pas garder le code sources des dépendances au même endroit que le code source de l'application. De plus il faut considérer une dépendance comme du \textit{readonly}. Le fait de lister les dépendance permet aussi de les auditer (pour les licences par exemple).
\item Configurations : tt ce qui peut varier entre différents déploiement ne doit pas être hardcodé dans l'application (Pour des raisons de déploiement mais aussi de sécurité). Ex : adresse i, username. La meilleur façon de passer de la configuration est d'utiliser les variables d'environnement. Il est aussi possible d'utiliser du yaml ou du json mais ce n'est pas l'idéal car pas facilement éditable. On peut également mettre la configuration dans un service à part dédié à la gestion des configurations (Consul, etcd). Attention à ne pas passer des \textit{secret} dans la configuration (comme des password). \keyref{https://www.vaultproject.io/}{Vault} permet de centraliser et stocker les \textit{secret}. La config se base en générale sur un système de clef valeur.
\item Backing Service : Tt ce dont la base de code à besoin peut être considérer comme un systême externe (I/O, base de donnée,...) et doit donc être isolé. L'appli est un service, la base est un service, l'authentification est un service.
\item Build, Release, Run : Build est la phase de transformation du code source en code exécutable (avec dll et ressources embarquées si besoin). Attentiojn ce n'est pas forcément une compilation, cela peut mener à une image docker par exemple.  Release : mise à disposition du binaire pour qu'il soit utilisable par qq un. Run : mettre à disposition la release et la faire tourner (c'est le déploiement) dans un environnement particulier en utilisant une configurations donnée (attention sur le site en lien ils parlent d'une Relase comme d'un build accompagnées d'une config). La limite entre Dev et Ops se situe entre Release et Run.
\item Process : Plusieurs instances d'une application doivent s'éxécuter en différents process indépendant les uns des autres (par instance). Cette isolation peut se faire en lancant chaque instance sur une VM différente (potentiellement dans la même \textit{Hypervisor}) ou bien via des containers (docker orchestré par kubernetes). L'idée est de sécuriser sa machine par rapport à une possible défaillance d'une des instances de l'application (ou une CVE exploitable selon les technologies utilisées dans l'application).
\item Port Binding : est le principe de mapper un port d'écoute sur un autre (Ex : docker écout le 80 mais il est mappé par la machine sur le 5000 car les 1 à 2024 sont réservé à root). On passe par du PAT (Port Adress Translation) pour rediriger le port déclarer vers un autre. L'intéret est surtout lié à la sécurité. Cela permet également d'assurer l'unicité des ports mappés dans les dockers (car ces dernier peuvent écouter sur le même port mais de deux container différent et la machine host doit tt de même pouvoir les distinguer. On map donc chacun des ports [identique] sur un port différent via PAT). En clair il faut que la configuration puisse donner la possibilité de mapper un port.
\item Concurrency : Il faut pouvoir déployer l'application plusieurs fois sans que les différentes instances ne bloque l'accès aux données des autres (ex d'un fichier partagé qui ne doit pas être bloqué par une des instance [sauf au moment de l'utilisation].) Dans la même veine il est possible d'utiliser un \keyref{https://redis.io/}{Redis} pour gérer l'état d'une session de connexion ou bien d'utiliser des système d'authentification sans état (au lieu de devoir stocker l'état coté serveur, qui peut changer si l'état du serveur change). Voir également \keyref{https://fr.wikipedia.org/wiki/JSON_Web_Token}{jwt} pour gérer de l'authentification. Au final on doit pouvoir démarer autant de fois que l'on souhaite l'application en parallele sans qu'une instance ne \textit{lock} une autre. 
\item Disposability : Le code est jetable. Il ne faut pas hésiter à faire, refaire, jeter, recommencer, patcher pour ensuite nettoyer. De plus le process correspondant doit démarer vite, à volonté et s'arréter correctement sans problème.
\item Dev/Prod Parity : on se doit d'être au plus proche de la production lors du développement. Ex : si en prod on utilise du MySql pour la base en v5, on doit utiliser la même chose en local lors du développement. Pour cela \keyref{https://docs.docker.com/compose/}{docker compose} peut aider : cela permet de monter plusieurs containers avec des spec spécifiques (on passe par un fichier docker-compose.yml). Il faut faire attention au Mock dans ces cas là par exemple. Il faut aussi faire attention aux dépendances utilisées lors du dev.
\item Logging : il faut des logs sur différents niveaux. Voir remarque en dessous.
\item Admin Processes : Si une opération d'administration est nécessaire (migrations, purge, bash d'insertion) il faut développer un process spécifique qui va s'occuper de sa et le séparer de l'application en elle même. Il faut donc un/des services dédiés à ce genre de chose. Les opérations de maintenances doivent également être traité de cette manière. Important ces opérations doivent être automatisé (voir Terraform un peu plus bas).\\
\end{enumerate}
}

L'idée est également déviter au maximum de cumuler de la dette technique.\\ 

\rem{Sur le versionning}{Pour accompagner les bonnes pratiques sur le Code Base et les Dependancies : voir le \keyref{https://semver.org/lang/fr/}{semantic versionning} (SEMVER). Par exemple le systeme version =  Major.Minor.Patch. Une mise à jour de patch est juste un update de type fix qui n'affecte pas le fonctionnement de l'application. Si l'on fait une update Du Minor (en ajoutant une fonctionnalité) il faut garder la rétrocompatibilité avec les mineurs précédentes (engament dans le SEMVER). Cette rétrocompatibilité n'est pas obligatoire lors d'un bump de la Major.}\\

\note{Une \keyref{https://cve.mitre.org/}{CVE} est une faille de sécurité connue et référencée (exemple : log4j)}\\

\rem{Sur les secret}{Il faut absoluement séparer les \textit{secret} du reste des données de configurations. En théorie (selon la loi) les mots de passe doivent être hasshé.}\\

\rem{Sur le hash}{Voir \keyref{https://www.bcrypt.fr/}{bcrypt} et \keyref{https://fr.wikipedia.org/wiki/SHA-2}{sha256} qui sont des algo d'encodage/décodage et de hash}\\

\rem{Sur les SPOF}{SPOF : Single Point Of Failure : quand une seul erreur fait s'écrouler tt le système. A éviter le plus possible.}\\

\rem{Un peu plus sur la notion de Concurrency et de Scaling}{On peut scale deux deux manières. Verticalement, cela implique de simplement augmenter la capacité en charge d'un process (ou une machine). Horizontalement, cela implique de multiplier le nombre de process (ou de machine). Le problème du scale verticale est que l'on ne peut pas faire d'application concurrente, de plus le scale vers le haut à forcément une limite (par exemple on sera forcément plus limité avec une connexion par rapport à plusieurs en parallele sur différente machine). Le choix entre l'un et l'autre peut aussi faire sur des critères financiers. La concurrency est le principe de pouvoir faire tourner plusieurs instances simultannée du même programme. Pour cela il faut parfois déporter certains service en dehors de l'application mais rend les applications plus facilement scalable (voir localisée à plusieurs endroits).}\\

\rem{Sur le \keyref{https://fr.wikipedia.org/wiki/Service-level_agreement}{SLA}}{Service Level Argeement : taux d'occupation annuelle des machines. En gros 100\% est équivalent à un serveur qui fournit du serveur tt le temps.}\\

\rem{Sur les niveaux de log}{\begin{itemize} 
\item Debbug : précis et complet, pour le dev en dev. 
\item Information : comportement global du programme (un suer demande une info par exemple).
\item Warning : problème ne provoquant pas d'erreur du programme mais signalant un disfonctionnement (ex : userName not found).
\item Error : il s'est passé qq chosd e problématique sans pour autant crasher l'application. (ex : cannot send Email pour une appli de mail). L'application ets toujours fonctionnel mais dégradée
\item Fatal error : crash totale de l'appli (ex : DB Connection fail). Doit faire une alerte, ouvrir un ticket (déclencher l'alarme générale).\\
\end{itemize}}

\note{Au niveau des log il faut commencer par les plus graves puis rajouter les autres au fur et à mesure.}\\

\rem{Sur a notion de \keyref{https://fr.wikipedia.org/wiki/Daemon_(informatique)}{Daemon}}{Il s'agit d'un process qui se lance puis continue de tourner. C'est l'inverse du script à usage unique.}\\

\note{Pour faire du Cloud gratuitement voir \keyref{https://fr.wikipedia.org/wiki/OpenStack}{OpenStack}.}\\

\rem{Pour un peu plus d'infos sur un modèle en réseau}{Voir : \keyref{https://fr.wikipedia.org/wiki/Mod\%C3\%A8le\_OSI}{OSI} (un peu daté mais toujours pertinent).}\\

\rem{Sur les différents types d'API}{En vrac SOAP, XMLRPC, JSONRPC, GRAPHQL, REST, ... qui sont des modèles d'architecture d'API.}\\

\rem{Sur une alternative au CRUD classique}{Voir le \keyref{https://docs.microsoft.com/fr-fr/azure/architecture/patterns/cqrs}{CQRS} : les read et write sont différents (avec un modele de données différent pour chaque).}\\

\note{Pour faire du microservice il faut à tt prix être bien outillé. L'automatisation est essentielle (déploiement, mise à jour, test). De plus il faut éviter le monolityque distribué également.}\\

\rem{Sur les microservices}{Un micro Service $=$ un process cad gère un métier (dans l'idéal). Dans un application en microservice cela permet de réutiliser des microservices déjà implémenter. Le Trick est de les rendre suffisemment générique. Faire du micro service c'est passer par de l'itération continue. Pour des outils \keyref{https://developer.okta.com/blog/2020/01/22/kafka-microservices}{kafka} (payant) ou bien \keyref{https://www.rabbitmq.com/}{RabittMq} (gratuit). Attention : il n'y a aucune raison de faire du microservices si ces derniers ne sont pas indépendants les uns des autres (le plus possible en tout cas).}\\

\defi{Sur le signe SGBD}{\keyref{https://fr.wikipedia.org/wiki/Syst\%C3\%A8me\_de\_gestion\_de\_base\_de\_donn\%C3\%A9es}{Système de Gestion de Base de Donnée}.}\\

\note{NoSql signifie Not Only Sql.}\\

\rem{Sur la notion de Canary Deployment}{Il s'agit en fait de ne déployer une version d'une appli que chez un certains pourcentages d'utilisateur. Les micro services permettent de faire du canary déployment sur de nombreuse feature.}\\

\section{Sur l'automatisation de l'Iaas}

L'automatisation est primordiale dans le cloud. Il faut donc passer du temps sur des scripts d'automatisation. \\

Il faut commencer par créer les ressources. Pour cela on peut utiliser \keyref{https://www.terraform.io/}{terraform}. Il permet de décrire des besoins via des ressources (qui peuvent être des images, des donnée, des images d'environnement, ...) dans un fichier \incode{.tf} qui va s'occuper de la création de ces ressources. On passe par le language \keyref{https://www.terraform.io/language/syntax/configuration}{HCL} (HashiCorpLangage). Voir également \url{https://registry.terraform.io/providers/ovh/ovh/latest/docs}.\\

\note{Terraform est aujourd'hui l'outil standart du pilotage (au sens de création, pas de pilotage réellement) de Cloud Natif.}\\

\note{Important : Dans le Cloud tt est pilotable par des API.}\\

\rem{Sur la relation entre base de donnée et containrisation}{Il n'est en générale par recommandé d'avoir une base de donnée dans un microservice. La base à tendance à prendre tt la place que l'on lui donne, si l'on veut le containeriser il vaut mieux le séparer dans son propre container qui doit être un container spécialisé dans la base de donnée (pour des raisons de performances, sur les IOPS (Input Output Per Second)). Le mieux au final est d'avoir une base de donnée en externe, à laquel les microservices vont venir se connecter en récupérant simplement une configuration.}\\

\rem{Sur un autre avantage de l'automatisation ET de la standardisation}{En plus de gagner du temps et donc d'en libérer pour des choses plus pointus que du simple déploiment, cela permet d'inclure un nouveau membre dans l'équipe plus facilement puisque tt est standardisé.}\\

\rem{Sur un autre outils d'automatisation : \keyref{https://docs.ansible.com/ansible/latest/index.html}{Ansible}}{Permet de décrire des configurations via un système de Task (installation de package, mise à jour, automatisation). On passe par des scripts \incode{yaml}. Le système se base sur un \textit{inventory} pour décrire le parc de machine (groupe d'utilisateur/serveur). Pour chaque type d'utilisateur/serveur on a un \textit{playbook} qui définit différent \textit{play} qui sont eux même constitué de \textit{task} (que l'on peut encore découper en sous Task). Le rincipe est de décrire les actions à effectuer en yaml (installer ci, mettre à jour sa,...).}\\

\rem{Pour une alternative à Terraform en local}{Voir \keyref{https://www.vagrantup.com/}{Vagrant} qui permet de créer des machines virtuelles via un fichier de config.}\\




%%--------------------------------------------------------------------------------------------------------------------------------1
%% Glossaires

\end{document}
\end{document}
