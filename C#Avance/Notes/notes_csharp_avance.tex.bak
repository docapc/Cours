%\listfiles
\documentclass[a4paper,12pt,twoside]{article}

%% packages
\usepackage[french]{babel}
\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}
\usepackage{amsmath,amssymb,mathrsfs} 
%\usepackage{import}
\usepackage{float, subfig, caption}
\usepackage{libertine}
\usepackage{fancybox}
\usepackage{graphicx}
\usepackage{xcolor} %/ pour \Definecolor
\usepackage[pdftex,final=true]{hyperref}
%\usepackage[]{hyperref}
\hypersetup{
colorlinks=true,
linkcolor=blue,
urlcolor=magenta, %/ file: adopte également cette couleur
filecolor=cyan, % ne fonctionne qu'avec run:, 
%citecolor=red
}
\urlstyle{same}
\usepackage[french]{minitoc}
\usepackage[acronym,toc,automake]{glossaries} % acronym pour les acronymes et toc pour inclusion des glossary dans la table des matières
\usepackage[left=2cm,right=2cm,top=2cm,bottom=2cm]{geometry}
%\usepackage{minted} % pour code avec coloration dans le texte
\usepackage{url} % Pour avoir de belles url
%% package ticks spécifiquement (pour les schémas) 
%\usepackage{tikz}%
%\usepackage[top=2cm,bottom=2cm]{geometry}
%% paramètres tikz
%\usetikzlibrary{patterns,decorations.pathreplacing,shapes.misc}
%\usetikzlibrary{calc}
%\tikzset{cross/.style={cross out, draw=black, minimum size=2*(#1-\pgflinewidth), inner sep=0pt, outer sep=0pt},
%default radius will be 1pt. 
%cross/.default={5pt}}
% \definecolor{Gray}{gray}{0.9}
% \definecolor{LightCyan}{rgb}{0.88,1,1}
% \newcommand{\RN}[1]{\textup{\uppercase\expandafter{\romannumeral#1}}}    

%% Macros comme variable
%\newcommand{\editorpath}{C:/Program Files/Notepad++/notepad++.exe}
\newcommand{\exemplepath}{../Exercices}
\newcommand{\urlcolor}{magenta}  % couleur des liens https
\newcommand{\filecolor}{cyan} % couleur des liens file: file
\newcommand{\pdfcolor}{red} % couleur des liens file: .pdf
\newcommand{\foldercolor}{orange} % couleur des liens file: Folder
\newcommand{\cscolor}{green!60!black} % couleur des liens file: .cs
\newcommand{\slncolor}{violet} % couleur des liens file: .sln
\newcommand{\keycolor}{purple} % couleur des liens  de type mot clefs
%% Macros commun
\newcommand{\incode}[1]{{\footnotesize\ttfamily #1}} % pour du pseudo-code simple
\newcommand{\rem}[2]{\noindent\underline{Remarque} : \textit{#1}.\\ \indent #2}
\newcommand{\note}[1]{\noindent\underline{Note} : \\ \indent #1}
\newcommand{\defi}[2]{\noindent\underline{Définition} : \textbf{#1}.\\ \indent #2}
\newcommand{\slide}[2]{\textbullet ~ Slide n°#1 : \indent #2}
%% Macro spécifiques à ce fichier (pas forcément) : pour fonctionner il faut que le fichier ai été ouvert diretcement dans le dossier du .tex ...
\newcommand{\fileref}[2]{\hypersetup{urlcolor=\filecolor}\href{file: #1}{#2}\hypersetup{urlcolor=\urlcolor}}
\newcommand{\pdfref}[2]{\hypersetup{urlcolor=\pdfcolor}\href{file: #1.pdf}{#2.pdf}\hypersetup{urlcolor=\urlcolor}}
\newcommand{\csref}[2]{\hypersetup{urlcolor=\cscolor}\href{file:\exemplepath /#1.cs}{#2.cs}\hypersetup{urlcolor=\urlcolor}}
\newcommand{\slnref}[2]{\hypersetup{urlcolor=\slncolor}\href{file:\exemplepath /#1.sln}{#2.sln}\hypersetup{urlcolor=\urlcolor}}
\newcommand{\folderref}[2]{\hypersetup{urlcolor=\foldercolor}\href{file:\exemplepath /#1/.}{#2}\hypersetup{urlcolor=\urlcolor}}
\newcommand{\keyref}[2]{\hypersetup{urlcolor=\keycolor} \href{#1}{\textbf{#2}}\hypersetup{urlcolor=\urlcolor}}
\newcommand{\keyword}[3]{\noindent\underline{Mot clef} : \keyref{#1}{#2}. \\ \indent #3}
%% Macro spécifiques à ce fichier (pas forcément)
\newcommand{\dpat}[7]{
\noindent \underline{Pattern} : \textbf{#1}, \indent (type : \textit{#2}) \\
\underline{Description} : \indent #3 \\
\underline{Exemple} : \indent #4 \\
\noindent \underline{Avantages} : 
\begin{itemize}
 #5
\end{itemize}
\noindent \underline{Inconvénients} : 
\begin{itemize}
 #6 
\end{itemize}
\underline{Liens} : #7 
}

%% Infos document
% Titre
\title{Notes sur le module : \textit{C\# Avancé}.}
% auteur
\author{Armel Pitelet}
% date de création du document
\date{\today}

%% Glossaire, acronymes et index
\makeglossaries

%% Glossaire et acronyme (déclarations)

% DIP : exemple de formalisme
\newglossaryentry{gl-dip}{
name = {DSP},
description = {la description détaillé}
}
\newglossaryentry{ac-dip}{
type = \acronymtype, name = {DSP}, 
description = {Nom simple}, 
first = {Première occurence\glsadd{gl-dip}}, 
see = [Glossaire:]{gl-dip}
}


\begin{document}
%% Organisation globale 
\maketitle
\tableofcontents

%%--------------------------------------------------------------------------------------------------------------------------------
\section{Code Synchrone et Asynchrone}

\rem{Sur les fenêtre wpf}{Il y a un processus qui tourne sur le Thread UI qui s'occupe de gérer la partie visible d'une fenêtre.}\\

\rem{Pour faire de l'asynchrone}{On peut passer par la classe Thread (depreciated) qui est la pour des raisons historique pour déclarer une action à faire dans un nouveaux Thread.}\\

\keyword{https://docs.microsoft.com/fr-fr/dotnet/csharp/language-reference/keywords/async}{async}{Authorise l'utilisation du \keyref{https://docs.microsoft.com/fr-fr/dotnet/csharp/language-reference/operators/await}{await}. Voir \url{https://docs.microsoft.com/fr-fr/dotnet/csharp/programming-guide/concepts/async/}.}\\

\keyword{https://docs.microsoft.com/fr-fr/dotnet/api/system.threading.tasks.task?view=net-6.0}{Task}{Une task représente une action à effectuer de manière asynchrone (en générale mais pas obligatoirement). On ne peut pas mettre à jour un autre Thread que celui en cours dans une Task. (voir remarque sur le \incode{Dispacher}).}\\

\keyword{https://docs.microsoft.com/fr-fr/dotnet/csharp/language-reference/operators/await}{await}{Tant que la ligne marquée await n'a pas finie son éxcécution, on attent avant de passer à la suite de la fonction.}\\

\note{On peut afficher les Threads en cours dans visual studio.}\\

\rem{Sur la classe \keyref{https://docs.microsoft.com/fr-fr/dotnet/api/system.windows.threading.dispatcher?view=windowsdesktop-6.0}{Dispacher}}{Elle permet de faire discuter les Threads entre eux via \incode{Dispacher.Invoke(une lambda qui fait un truc)}.}\\

\note{Si on a le choix, c'est plus performant d'utiliser de l'asynchrone que du synchrone.}\\

\rem{Pour faire des fonctions asynchrone}{Il faut utiliser le mot clef \incode{async} et renvoyer void ou bien renvoyer une \incode{Task<UnType>}. Il vaut mieux renvoyer une Task car elle à des propriétés que l'on peut vouloir récupérer (comme la Task est elle toujours en cours d'exécution ou pas). Le \incode{return} de la fonction n'a cependant pas à renvoyer lui même une \incode{Task} (à partir du moment ou on a un \incode{await} quelque part dans la fonction).}\\

\rem{Sur \incode{Task.FromResult()}}{Permet de créer une \incode{Task} à partir de ce que l'on met dans le \incode{Result(un\_truc)}. Lorsque l'évènement est levé, la méthode abonner est appelée. On se désabonne ensuite via un $Event -= UnTruc$.}\\

\rem{Sur la notion d'Asynchrone}{Faire de l'asynchrone avec \incode{async await} revient à écrire du code de manière synchrone (le code après un await est excécuté aprés la fin de la Task marqué en await) mais ce qui est éxcécuté en asynchrone est exécutée sur un Thread à part qui ne bloque pas l'exécution des autres Threads en cours.}\\

\note{On peut rendre une tache synchrone en utilisant \incode{Task.GetAwaiter().GetResult()}. C'est complètement inutile sauf si on ne peut absolument pas renvoyer une \incode{Task} (comme sur du code Legacy par exemple)}\\

\rem{Sur la gestion de plusieurs Task en même temps}{Task.WhenAll(task1,task2), WaitAll(task1,task2) permettent d'attendre que les Task données soient terminées. \incode{WhenAny} permet d'éxcécuter ce qui suit une fois qu'au moins une des Task est terminée}\\

\rem{Divers trucs sur les Tasks en générale}{\incode{Task.FromResult(résultat)} permet de renvoyer un résultat (synchrone ou non). Est équivalent à passer par le constructeur de Task (\incode{new Task()}). \incode{Task.FromException(new Exception())} permet de créer une Task à partir d'une exception.}\\

\rem{Sur la gestion des exceptions dans les Task}{Les exceptions (pasque c'est bien fait) peuvent remonter dans le Thread principale. A partir du moment ou la Task est asynchrone et lève une exception tt se passe (pour nous) comme si on était en synchrone, il n'y a pas de précautions particulières à prendre.}\\

\rem{Sur le type d'exception qui remonte des Task}{Ces Exceptions sont typé de la même manière que les classiques.}\\

\rem{Sur l'\incode{AggregateException}}{Type particulier d'exception qui peut popper dans certain contexts (ex : Parallel) à la place de l'excpetion que l'on attend. C'est une exception qui aggrège (wrap) un ensemble d'exceptions et qui contient d'autres exceptions. Ce type d'Exception arrive quand on est dans d'autres Thread que le principale. N'arrive pas si l'on fait bien les async await mais peut arriver facilement dans les systèmes multi-threadés et/ou parallélisés.}\\

\section{Les Events}

\rem{Sur les Events}{Dans visual Studio un symbol d'éclaire à coté d'un nom de variable imndique un évènement. Un évènement se déclare avec le mot clef \incode{event} puis un type délégué Nom de l'event. Lorsque l'on fait un \incode{Evenement += UnTruc}. On abonne la méthode \incode{UnTruc} à l'évènement \incode{Evenement}. La desinscription est obligatoire à un moment lors du programme. Attention, si l'on passe des fonction anonymes, il n'existe aucun moyen de se désabonner!}\\

\rem{Sur les \incode{Loaded} et \incode{Unloaded} dans WPF}{Il n'est pas nécessaire de se désabonner à ces évènement la puisqu'ilms sont détruits en même temps que la fenêtre.}\\

\note{En Angular, le système d'abonnement est identique. Cas particulier, les requêtes Http ne nécessite pas de désabonnement.}\\

\note{En générale on passe plus par du \incode{async await} que du \incode{EventHandler} pour faire de l'asynchrone. Mais c'est encore très présent en Wpf.}\\

\rem{Sur le passage d'argument aux Events}{Il est nécessaire de créer des classes qui hérite de \incode{EventArgs} pour passer des arguments aux évènements.}\\

\rem{Sur le \incode{InitializeComponent} en WPF}{Cette commande vient en fait transformer le xaml en une vrai classe .cs (d'ou le \incode{partial} devant les deux types de classes)}\\

\note{Les EventQQChose sont en faite des classes de \keyref{https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/delegates/}{délégué}}\\

\note{Les \incode{Event} sont des propriétés sans Getter Setter!}\\

\rem{Sur les méthodes qui s'abonne aux event}{Il vaut mieux toujours vérifier que l'event existe (c'est à dire qu'il ait au moins un abonnement $\to$ d'où les \incode{if(MonEvent!= null)}).}

\section{Le chemin critique : notion de threads partagés}

\rem{Sur la notion de thread-safe}{Une méthode que l'on ne peut pas partager entre plusieurs thread, ou plus simplement une ressource, est dites non thread-safe}\\

\rem{Sur les sémaphores}{C'est un type d'outil qui permet de rendre thread safe une ressource. Une autre des manière de faire (qui n'est pas un sémaphore) est d'utiliser des lockers (de type \keyref{https://docs.microsoft.com/fr-fr/dotnet/api/system.object?view=net-6.0}{object}). Une autre est de passer par la class \keyref{https://docs.microsoft.com/en-us/dotnet/api/system.threading.semaphoreslim?view=net-6.0}{SemaphoreSlim}.}\\

\keyword{https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/statements/lock}{lock}{Tant que l'objet contenue dans le lock(monObjet) est maintenue, on ne peut plus accéder au block couvert par le lock. Cela crée ce que l'on appel un \textbf{chemin critique}. Le lock met en attente automatiquement les thread qui essaie d'accéder à la ressource si un thread occupe déjà ce block. Attention le lock ne fait que du verrou séquentielle (les threads le passeront un par par un uniquement).}\\

\rem{Sur les environnements multi-threadés}{Il est très conseiller d'utiliser une classe dédié à la gestion des threads lorsque l'on est dans un environnement gérant plusieurs threads. Il est bien d'isoler le code qui doit tourner dans un thread dans cette classe.}\\

\rem{Sur la notion de watch-dog}{C'est un système de surveillance qui track et détecte les changement. Le \incode{dotnet watch} est un exemple d'un tel système.}\\

\rem{Sur le \keyref{https://docs.microsoft.com/en-us/dotnet/api/system.threading.semaphoreslim?view=net-6.0}{SemaphoreSlime}}{Permet de filtrer l'accès à un trhead mais par paquet de $X$ (SémaphoreSlim($X$)) que l'on peut définir (on est plus limité à de l'envoie un par un  mais on peut quand même limiter le nombre de thread qui travail simultanément au même endroit). Attention il faut Wait puis Release le sémaphore. Cela peut être critique si il y a une erreur entre le Wait et le Release! (Si l'on veut cacth l'erreur il faut absoluement que le release du sémaphore soit dans un finaly).}\\

\rem{Sur le \keyref{https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent?view=net-6.0}{System.Collection.Concurrent}}{Fournit une alternative aux classes de base non thread safe (comme la List) pour pouvoir les utiliser dans un environnement multithreadé (ce n'est pas vraiment). Si l'on utilise pas ce namespace, les Threads peuvent s'exécuter un peu dans n'importe quelle ordre, et un Thread peut prendre plus de tache que d'autre. Concurrent règle ce problème de \textit{cannibalisme} entre Threads.}\\

\rem{Le HttpClient et les accès base de données sont ThreadSafe.}\\

\section{Collection avancée}

\rem{Sur le \keyref{https://docs.microsoft.com/fr-fr/dotnet/api/system.collections.stack?view=net-6.0}{Stack}}{Liste de type LIFO (Last In, First Out).}\\

\rem{Sur le \keyref{https://docs.microsoft.com/fr-fr/dotnet/api/system.collections.queue?view=net-6.0}{Queue}}{Liste de type FIFO (First in Fisrt Out).}\\

\rem{Sur le \keyref{https://docs.microsoft.com/fr-fr/dotnet/api/system.lazy-1?view=net-6.0}{Lazy}}{Permet de faire du thread safe de manière un peu magique. $\to$ A creuser. Ne crée une instance d'un objet qu'au tt dernier moment (à la première initialisation).}\\

\section{La ``containerisation'' des applis}

Ou comment déployer dans un environnement spécifique. \\

\note{On passe par \keyref{https://www.docker.com/get-started}{Docker}.}\\

\rem{Sur la notion de container}{Docker permet de lancer des \textit{containers}. Le principe du container est d'avoir un environnement maitrisé (maitrisé ce qu'il y a dans l'environnement très exactement). Docker permet d'héberger des environnement différents de celui de la mchine \textit{host}.}\\

\note{Lorsqu'on lance un projet Visual Studio on peut lui indiquer d'utiliser un container docker. Cela ajoute un fichier \incode{Dockerfile}. A partir de ce fichier on peut installer via Docker des images d'environnement déjà préparé (On peut faire tourner du Dotnet En Docker sans avoir à installer dotnet directement sur la machine). Voix \keyref{https://docs.docker.com/docker-hub/}{DockerHub} pour une liste de ce qui existe déjà}\\

\note{Le gros intérêt de docker est de ne plus avoir aucune dépendance sur la machine locale et de tt déporter dans le conteneur docker lui même qui simule autant d'environnement différents que l'on veut. On peut voir les container comme de petites machines virtuelles light (mais ce ne sont pas des machines virtuelles!). C'est plus proche des navigateur qui alloue à chaque onglet un processus distinct séparé des autres.}\\

\note{On peut lancer plusieurs containers docker depuis la même machine.}\\

\rem{Sur les images}{Les images crées par docker sont conservées en local (après le téléchargement initial). On peut après sa réutiliser la même image dans plusieurs container différents.}\\

\rem{Sur la communication inter-container}{On peut indiquer à docker un port pour la communication à l'extérieur. Cela permet par exemple d'avoir une base de données sur un conteneur, et une ou plusieurs API dans d'autres conteneur qui se connecte à cette base. Pour faire ce gerne de chose on passe par un fichier Dockercompose (un .yml) qui configure ces connexions.}\\

\rem{Pour créer un network}{On passe par \keyref{https://docs.docker.com/compose/}{docker-compose} up.}\\

\note{La bonne pratique est d'avoir un conteneur par composants (dans le même sens que les diagrammes de composants).}\\

\rem{Sur l'alias latest}{Attention à ne pas utiliser cette alias car il a le sens de ``dernière version'' dans docker (c'est un alias qui représente la dernière version disponible, qui peut changer d'une machine à l'autre!).}\\

\rem{Sur les alternatives à Docker}{Il y a \keyref{https://kubernetes.io/fr/}{kubernetes} ou bien \keyref{https://tanzu.vmware.com/tanzu}{tanzu}.}\\

\rem{Pour ce mettre à docker}{Go to \url{https://docs.docker.com/get-started/}.}\\

\section{Collections avancées}

Ces différentes collections avancées répondent surtout à des problèmes de performances spécifiques. Il faut les choisir en fonciton des besoins. Liens principaux \keyref{https://docs.microsoft.com/fr-fr/dotnet/api/system.collections.generic?view=net-6.0}{System.Collection.Generic} et \keyref{https://docs.microsoft.com/fr-fr/dotnet/api/system.collections?view=net-6.0}{System.Collection}.\\

\keyword{https://docs.microsoft.com/fr-fr/dotnet/api/system.collections.sortedlist?view=net-6.0}{SortedList}{Liste trié non typé. Ce n'est pas tt à fait une Liste mais plus un dictionnaire car système de clef valeur.Non typée mais on le déclare quand même avec un type <type\_clef, type\_valeur>, ou bien on peut juste ne pas la typer mais c'est prendre le risque de ne plus savoir ce que l'on a dedans. On peut récupérer une valeur par l'indexation entre crochet. Voir \url{https://www.tutorialsteacher.com/csharp/csharp-sortedlist}, \url{https://www.geeksforgeeks.org/c-sharp-sortedlist-with-examples/} et \url{https://fr.acervolima.com/c-sortedlist-avec-des-exemples/}. Particularité, ce genre de collection réarange les valeurs en triant par clef dans un ordre croissant. On peut récupérer les valeur via \incode{MaList[UneClef]} ou bien via \incode{MaList.ElementAt(un\_index)}}\\

\note{Attention à la différence entre \keyref{https://docs.microsoft.com/fr-fr/dotnet/api/system.collections.sortedlist?view=net-6.0}{SortedList} (de System.Collection) et \keyref{https://docs.microsoft.com/fr-fr/dotnet/api/system.collections.generic.sortedlist-2?view=net-6.0}{SortedList<T1,T2>} (de SYstem.Collection.Generic).}\\

\rem{Sur la différence entre dictionnaire et orted List}{Le dictionnaire est plus performant en écriture alors que la list est plus rapide en lecture (car elle est trié). Le gros intêret de la SOrtedList c'est l'accès par index plus que l'accès par clef. Voir la note remaqrue suivante sur les performances.}\\

\rem{Sur le \keyref{https://docs.microsoft.com/fr-fr/dotnet/api/system.collections.generic.sorteddictionary-2?view=net-6.0}{SortedDictionnary}}{Dans l'utilisation on en fait la même chose. Ce qui change c'est les performances en fonction de l'utilisation. Voir \url{https://stackoverflow.com/questions/935621/whats-the-difference-between-sortedlist-and-sorteddictionary}.}\\

\keyword{https://docs.microsoft.com/fr-fr/dotnet/api/system.collections.generic.linkedlist-1?view=net-6.0}{LinkedList}{Liste doublement chainée dont le principale interet est le fait que les opérations d'insertion et suppresion sont en O(1). Liste double chainée au sens des pointeurs. N'a pas d'indexeurs mais un système de noeuds. Voir \url{https://stackoverflow.com/questions/169973/when-should-i-use-a-list-vs-a-linkedlist} concernant l'intrêt et les performances de ce genre de trucs.}\\

\keyword{https://docs.microsoft.com/fr-fr/dotnet/api/system.collections.generic.hashset-1?view=net-6.0}{HashSet}{Equivalent du Set classiqe aka une collection sans répétitions. Surtout utilisé pour de la comparaisons d'élément (de Set à Set). Le hashSet se base sur le hash de la valeur plutôt que sur la valeur en elle même. Il existe aussi le \keyref{https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedset-1?redirectedfrom=MSDN&view=net-6.0}{SortedSet} qui maintiens un ordre en plus d'une uncicité (surtout utile car est thread safe par rapport au HashSet qui semble ne pas l'être). C'est Set sont surtout utiles et performants sur les opérations de comparaison comme, union, exclusion. Un peu plus de doc sur les HashSet \url{https://www.c-sharpcorner.com/article/working-with-hashset-in-c-sharp/}. Attention lors de l'utilisation d'objet, si l'on veut garantr l'unicité il faut se basé sur \keyref{https://docs.microsoft.com/fr-fr/dotnet/api/system.iequatable-1?view=net-6.0}{IEquatable} (override du Equals) et \keyref{https://docs.microsoft.com/fr-fr/dotnet/api/system.object.gethashcode?view=net-6.0}{GetHashCode} pour faire de la comparaison. En théorie le HashCode est suffisant pour les opérations sur les Set, le IEquatable est une bonne pratique qui permet de faire des comparaison non basé sur la référence d'un objet dans d'autre collections.}\\

\rem{Sur l'interface \keyref{https://docs.microsoft.com/fr-fr/dotnet/api/system.collections.iequalitycomparer?view=net-6.0}{IEquatableComparer}}{C'est une interface qui force l'implémentation du Equals(object) \textbf{et} GetHashCode.}\\

\rem{Sur la méthode \keyref{https://docs.microsoft.com/fr-fr/dotnet/api/system.iequatable-1.equals?view=net-6.0\#system-iequatable-1-equals(-0)}{Equals} et l'override du $==$}{Pour override un opréteur, on fait comme en c$++$, et il faut que cette dernière renvoie un résultat basée sur l'implem du Equals.}\\

\note{Des liens sur la surcharge et l'override des opérateurs : \url{https://docs.microsoft.com/fr-fr/dotnet/csharp/language-reference/operators/operator-overloading}, \url{https://www.tutorialspoint.com/csharp/csharp_operator_overloading.htm}. Commencer par \url{https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/operator-overloading\#overloadable-operators}.}\\

\note{Pour revoir le GetHashCode on peut passer par la structure \keyref{https://docs.microsoft.com/fr-fr/dotnet/api/system.hashcode?view=net-6.0}{HashCode} qui fournit des méthodes de génération que l'on peut utiliser pour définir comment est calculé le hash d'un objet.}\\

\section{Les Métadonnées}

Sur les métadonnées \url{https://docs.microsoft.com/en-us/dotnet/standard/metadata-and-self-describing-components}. Pour la suite voir le schéma sur 08/02/22 1.\\
PLus de liens : \url{https://docs.microsoft.com/fr-fr/dotnet/api/system.componentmodel.dataannotations.metadatatypeattribute?view=net-6.0} (doc microsoft), \url{https://www.section.io/engineering-education/working-with-metadata-in-csharp/} (un article qui résume un peu).\\

\rem{Sur les \keyref{https://docs.microsoft.com/en-us/dotnet/standard/assembly/}{Assemblies}}{Regroupe toute les collections, version et ressources (toutes les données) que l'on utilise dans un projet.Le runtime prend en entrée une assembly pour la passer au \textit{Common Language Runtime} (CLR). Dans visual studio : Affichage : Divers on peut avoir tt les infos sur l'assembly.}\\

\rem{Sur les \keyref{https://fr.wikipedia.org/wiki/Dynamic_Link_Library}{dll}}{Est utilisé par une assembly comme une ressource au RunTime. C'est différent d'un .exe qui lui sera un véritable programme qui utilisera (voir embarquera) les dll pendant le runtime.}\\

\defi{Common Intermediate Language }{Ou CIL est le language de compilation avant le CLR. C'est ce qui va utiliser les Métadonnées pour décrire les types, classes, ... et les passer au CLR.}

\rem{Sur les \keyref{https://docs.microsoft.com/en-us/dotnet/standard/metadata-and-self-describing-components}{Métadonnée}}{Ce sont les \textit{données des données}. On peut les retrouver dans l'assembly.}\\

\note{Lorsque l'on regarde dans les propréiéts d'un projet ou d'une solution on est en fait dans les Métadonnées de l'assembly/des assemblies.}\\


\rem{Sur les \keyref{https://docs.microsoft.com/en-us/dotnet/standard/attributes/}{Attributs}}{Voir le guide \url{https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/} pour utiliser les attributs et même en créer de custom. Voir le namespace \keyref{https://docs.microsoft.com/en-us/dotnet/api/system.attribute?view=net-6.0}{System.Attribute}.}\\

\rem{POur faire fonctionner les Tests Unitaire avec des classes internal}{On passe par l'attribut \keyref{https://docs.microsoft.com/fr-fr/dotnet/standard/assembly/friend}{friend}! Il faut marquer la classe internal et référencer la friend assembly. Cette attribut se met au dessus du namespace. Une autre manière de faire est de passer par le csproj (dans lequel se trouve l'internal). Dans la section <ItemGroup>... il faut faire un <AssemblyAttribute Include>... avec Include = "System.Runtime.CompilerService.InternalToVisibleTo" et lui donner un <\_ParameterX>MonProjetAmis</\_ParameterX> (X est un nombre à donner et le underscore est complètement optionnel, c'est une simple convention). Cela permet de rendre l'entièretés des classes internal du projet visible par le projet Amis.}\\

\rem{Sur la \keyref{https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/reflection}{réflexion}}{C'est basé sur les métadonnées des classes. Principalement on utilise le \incode{MonInstance.GetType().GetProperties()} ou bien \incode{typeof(MaClasse).GetProperties()}pour récupérer les propriétées associées à une classe. Cela permet d'accéder aux champs privées, de bouclé sur tt les propriétées sans les nommer. Attention la réflexion est un mécanisme relativement lent. Pour plus de Doc : \url{https://docs.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/reflection} et \url{https://docs.microsoft.com/fr-fr/dotnet/api/system.reflection.parameterinfo?view=net-6.0} pour quelques exemple. Sinon de manière générale voir tt la doc sur le namespace \keyref{https://docs.microsoft.com/fr-fr/dotnet/api/system.reflection?view=net-6.0}{System.Reflection}.}\\

\rem{Sur les \keyref{https://docs.microsoft.com/fr-fr/dotnet/api/system.componentmodel.dataannotations.metadatatypeattribute?view=net-6.0}{Attibuts} en api}{Voir aussi de manière générale la doc sur le namespace \keyref{https://docs.microsoft.com/fr-fr/dotnet/api/system.componentmodel.dataannotations?view=net-6.0}{System.componentModel.DataAnntotations}.}\\

\note{Voir ce genre de \keyref{https://json2csharp.com/}{truc} pour convertir du json en classe C\# et inversement.}\\

\note{Sur une piste pour régler le problème du IngredientController : passer par les models binders \url{https://docs.microsoft.com/en-us/aspnet/core/mvc/advanced/custom-model-binding?view=aspnetcore-6.0}.}\\

\section{Divers}

\rem{De la doc sur Docker et les API}{\url{https://github.com/dotnet/dotnet-docker/blob/main/samples/run-aspnetcore-https-development.md} (repo .NET) et la doc associée \url{https://docs.microsoft.com/fr-fr/aspnet/core/host-and-deploy/docker/building-net-docker-images?view=aspnetcore-6.0} (Doc Microsoft). On peut partir sur ce git pour s'entrainer à utiliser docker.}\\

\rem{Sur la manière de deckerisez le programme}{Soit on sépare la base (dans son environnement avec le sdk et mssql) et le prgramme de l'api dans leur propre container docker. A ce moment la il faudra les faire communiquer entre eux vai les port des container. Soit on lance la base en local et on fait communiquer l'api en contectant son conteneur avec le localhost.}\\

\note{On peut aussi faire de la communication avec le net (web) via docker.}\\

\rem{Un peu plus de doc sur docker}{Comment créer du multi container via visual studio : \url{https://docs.microsoft.com/fr-fr/visualstudio/containers/tutorial-multicontainer?view=vs-2022}. Comment lancer une base de donnée dans son propre conteneur : \url{https://docs.docker.com/samples/aspnet-mssql-compose/}.}\\

\note{Lorsque l'on crée un Projet VS on peut lui indiquer de prendre en compte Docker. Cela va en fait créer un Dockerfile adapté. Sur un pojet en cours il \textit{suffit} de rajouter un Dockerfile adapté. Il faut alors faire attention aux noms.}\\

\note{Sur la construction d'un Dockerfile : \url{https://devopssec.fr/article/creer-ses-propres-images-docker-dockerfile} (blog) ou bien la doc officiel : \url{https://docs.docker.com/engine/reference/builder/\#usage}.}\\

\section{Sur la création d'installer}

Il faut passer par une xextension de Visual studio : \url{https://marketplace.visualstudio.com/items?itemName=VisualStudioClient.MicrosoftVisualStudio2022InstallerProjects}. Cela va installer de nouveaux template. Il faut ensuite crer un nouveau projet de type Setup. On peut à partir d'ici définir des raccourcis à créer ainsi que les sorties principales de l'installer (dll, pdb et exe). Au leiu de sortie de projet il faut lui demander d'embaquer les éléments de publication. Pour créer l'installer il suffit ensuite de générer le projet.
Cela va créer un installer qui va embarquer tt ce que l'on peut trouver dans le folder \incode{bin/...}.

\rem{Sur la désinstallation}{Il suffit de click droit sur le projet setup dans Visual Studio et de demander la désinstallation.}\\

\rem{Sur les dépendance}{Il est possible de spécifier les dépendances (comme dotnet framework ou dotnet core). Sinon on peut packager les dépendances dans un seul fichier.}\\

%%--------------------------------------------------------------------------------------------------------------------------------1
%% Glossaires


\end{document}
\end{document}
