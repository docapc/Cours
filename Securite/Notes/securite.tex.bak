%\listfiles
\documentclass[a4paper,12pt,twoside]{article}

%% packages
\usepackage[french]{babel}
\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}
\usepackage{amsmath,amssymb,mathrsfs} 
%\usepackage{import}
\usepackage{float, subfig, caption}
\usepackage{libertine}
\usepackage{fancybox}
\usepackage{graphicx}
\usepackage{xcolor} %/ pour \Definecolor
\usepackage[pdftex,final=true]{hyperref}
%\usepackage[]{hyperref}
\hypersetup{
colorlinks=true,
linkcolor=blue,
urlcolor=magenta, %/ file: adopte également cette couleur
filecolor=cyan, % ne fonctionne qu'avec run:, 
%citecolor=red
}
\urlstyle{same}
\usepackage[french]{minitoc}
\usepackage[acronym,toc,automake]{glossaries} % acronym pour les acronymes et toc pour inclusion des glossary dans la table des matières
\usepackage[left=2cm,right=2cm,top=2cm,bottom=2cm]{geometry}
%\usepackage{minted} % pour code avec coloration dans le texte
\usepackage{url} % Pour avoir de belles url
%% package ticks spécifiquement (pour les schémas) 
%\usepackage{tikz}%
%\usepackage[top=2cm,bottom=2cm]{geometry}
%% paramètres tikz
%\usetikzlibrary{patterns,decorations.pathreplacing,shapes.misc}
%\usetikzlibrary{calc}
%\tikzset{cross/.style={cross out, draw=black, minimum size=2*(#1-\pgflinewidth), inner sep=0pt, outer sep=0pt},
%default radius will be 1pt. 
%cross/.default={5pt}}
% \definecolor{Gray}{gray}{0.9}
% \definecolor{LightCyan}{rgb}{0.88,1,1}
% \newcommand{\RN}[1]{\textup{\uppercase\expandafter{\romannumeral#1}}}    

%% Macros comme variable
%\newcommand{\editorpath}{C:/Program Files/Notepad++/notepad++.exe}
\newcommand{\exemplepath}{../Exercices}
\newcommand{\urlcolor}{magenta}  % couleur des liens https
\newcommand{\filecolor}{cyan} % couleur des liens file: file
\newcommand{\pdfcolor}{red} % couleur des liens file: .pdf
\newcommand{\foldercolor}{orange} % couleur des liens file: Folder
\newcommand{\cscolor}{green!60!black} % couleur des liens file: .cs
\newcommand{\slncolor}{violet} % couleur des liens file: .sln
\newcommand{\keycolor}{purple} % couleur des liens  de type mot clefs
%% Macros commun
\newcommand{\incode}[1]{{\footnotesize\ttfamily #1}} % pour du pseudo-code simple
\newcommand{\rem}[2]{\noindent\underline{Remarque} : \textit{#1}.\\ \indent #2}
\newcommand{\note}[1]{\noindent\underline{Note} : \\ \indent #1}
\newcommand{\defi}[2]{\noindent\underline{Définition} : \textbf{#1}.\\ \indent #2}
\newcommand{\slide}[2]{\textbullet ~ Slide n°#1 : \indent #2}
%% Macro spécifiques à ce fichier (pas forcément) : pour fonctionner il faut que le fichier ai été ouvert diretcement dans le dossier du .tex ...
\newcommand{\fileref}[2]{\hypersetup{urlcolor=\filecolor}\href{file: #1}{#2}\hypersetup{urlcolor=\urlcolor}}
\newcommand{\pdfref}[2]{\hypersetup{urlcolor=\pdfcolor}\href{file: #1.pdf}{#2.pdf}\hypersetup{urlcolor=\urlcolor}}
\newcommand{\csref}[2]{\hypersetup{urlcolor=\cscolor}\href{file:\exemplepath /#1.cs}{#2.cs}\hypersetup{urlcolor=\urlcolor}}
\newcommand{\slnref}[2]{\hypersetup{urlcolor=\slncolor}\href{file:\exemplepath /#1.sln}{#2.sln}\hypersetup{urlcolor=\urlcolor}}
\newcommand{\folderref}[2]{\hypersetup{urlcolor=\foldercolor}\href{file:\exemplepath /#1/.}{#2}\hypersetup{urlcolor=\urlcolor}}
\newcommand{\keyref}[2]{\hypersetup{urlcolor=\keycolor} \href{#1}{\textbf{#2}}\hypersetup{urlcolor=\urlcolor}}
\newcommand{\keyword}[3]{\noindent\underline{Mot clef} : \keyref{#1}{#2}. \\ \indent #3}
%% Macro spécifiques à ce fichier (pas forcément)
\newcommand{\dpat}[7]{
\noindent \underline{Pattern} : \textbf{#1}, \indent (type : \textit{#2}) \\
\underline{Description} : \indent #3 \\
\underline{Exemple} : \indent #4 \\
\noindent \underline{Avantages} : 
\begin{itemize}
 #5
\end{itemize}
\noindent \underline{Inconvénients} : 
\begin{itemize}
 #6 
\end{itemize}
\underline{Liens} : #7 
}

%% Infos document
% Titre
\title{Notes sur le module : \textit{Sécurité Applicative}.}
% auteur
\author{Armel Pitelet}
% date de création du document
\date{\today}

%% Glossaire, acronymes et index
\makeglossaries

%% Glossaire et acronyme (déclarations)

% DIP : exemple de formalisme
\newglossaryentry{gl-dip}{
name = {DSP},
description = {la description détaillé}
}
\newglossaryentry{ac-dip}{
type = \acronymtype, name = {DSP}, 
description = {Nom simple}, 
first = {Première occurence\glsadd{gl-dip}}, 
see = [Glossaire:]{gl-dip}
}


\begin{document}
%% Organisation globale 
\maketitle
\tableofcontents

%%--------------------------------------------------------------------------------------------------------------------------------
\section{Généralités}

\note{Il est préférable de ne jamais faire de la sécurité à la main!  Authentification et authorisation (surtout plublic) sont des exemple de choses à ne pas faire à la main.}\\

\rem{Sur la prmeière sécurité en Web}{Elle est dans le s du https. Cette norme demande un certificat ssl.}\\

\rem{Sur les certificats de sécurité}{Il en existe deux grandes familles : les simples (my-app.ipme.com) ou les wildcard (*.ipme.com). Certaine entreprises sont authorisées à émettre des certificats validés. Ces denrier sont reconnue par la plupart des navigateurs. Les certificats sont tous issus de certificats racines (en nombre limité), la confiance vient de la. Un certificat est composé de deux partie, une clef publique et une clef privée. C'est la clef privée qui permet la génération de sous certificat. L'intéret du certificat est de chiffré une page. Il possède une date de validité. En générale il vaut mieux ne pas laisser trainer les clefs privées}\\

\note{Pour de l'authentification il ne faut pas utiliser de Get (https). Il vaut mieux passer par un post car le body de celui ci est sécurisé, ce qui n'est pas le cas du header du Get.}\\

\note{Les certificats Self-sign sont des certificats qui ne dérive pas d'une racine connue et vérifié. }

\note{Pour générer des certificats : \keyref{https://www.openssl.org/}{openssl}.}\\

\rem{Sur un système d'authorisation dans l'api}{Cela est nécessaire car en générale on fait de l'API Stateless. Pour faire de l'authorisation on peut passer par de la Session ou du Token.}\\

\rem{Sur les Session}{c'est un dictionnaire avec identifiant. C'est le serveur qui maintien la session via un cookie. Attention car ce n'est pas évident à mettre en place avec une API STateless.}\\

\rem{Sur l'authentification Toekn Based}{Voir \keyref{https://oauth.net/2/}{OAuth 2.0}. On a en fait trois composant distincts CLient, Api, Idp (identity Provider). C'est l'Idp qui valide une entité et retourne un Token JWT (JSON Web Token). Le token fait office d'identité. Contrairement au Session, ici c'est le client qui maintien son token, pas le serveur.}

\note{Sur le \keyref{https://jwt.io/}{jwt}. Le token est encrypté et ce site permet de le lire. Il ne faut pas mettre d'id ou de chose qui change dans un token car ces derniers ont une date validé. La donné en base en rapport avec l'utilisateur peut changer .}\\

\note{Pour faire de l'identification en dotnet, on peut passer par \keyref{https://docs.microsoft.com/fr-fr/dotnet/architecture/cloud-native/identity-server}{identity server} ou bien \keyref{https://github.com/openiddict/openiddict-core}{OpenIddict} (plus custom mais moins facile à prendre en main). On peut également voir \keyref{https://auth0.com/fr}{Auth0} qui en plus gèr ele multi tenant (une adresse peut se connecter à plusieurs comptes différents).}\\

\note{en plus de \keyref{https://oauth.net/2/}{OAuth 2.0} il existe aussi l apossibilité de rajouter \keyref{https://openid.net/connect/}{OpenId} par dessus. L'interet est de pouvoir utiliser un système de scope qui permet de donner des droit spécialiser (comme lire un article spécifique...).}\\

\rem{Sur les \keyref{https://developer.mozilla.org/fr/docs/Web/HTTP/CORS}{CORS}}{Une autre couche de sécurité qui permet de gérer les droits au niveau de l'API. Il est également possible d'utiliser sa pour masquer certaine infos dans les headers.}\\

\note{Le sports http et https sont des port réservé en web!}

\note{Sue le couple login/mdp, il ne faut pas renvoyer d'info précise sur l'existence de l'email ou du mdp.}\\

\note{Un autre système d'authentification : \keyref{https://www.keycloak.org/}{keycloak}.}\\

\section{Sur Auth0}

\rem{Sur la notion de tenant}{En gros c'est un tenant pour une api.}\\

\rem{Sur l'onglet application}{Ici une application est un composant qui va utiliser Auth0. Par exemple l'api et/ou les fronts. Le \textit{Domain} est le nom du tenant associée, le Client Id est une clef publique, la clef privée sert lors des discussions de machine à machine.}\\

\rem{Sur les Single Page Application}{Angular en est une. Il s'agit d'une application qui génère un fichier. ID token expiration donne la durée de vie d'un token d'authentification.}\\

\rem{Pour pouvoir utiliser Auth0 dans angular}{Il faut passer par une librairie dédiée via un npm install. Il faut créer un nouveau module : app-authentification.modules.ts et importer ici le module (Authmodule.forRoot(domain : MonDomaine, clientId : monIdDeClient)). Il faut ensuite importere ce module dans le module principale. Une fois ces méchanismes mis en place il suffit d'utiliser un service le AuthService. On peut l'utiliser ensuite pour faire authService.LoginWithRedirect() qui demande une nouvelle page. On peut faire aussi via un popup au lieu d'une nouvelle fenêtre. Pour povoir utiliser correctement cette fonction il faut du coté de Auth0 configuré l'url de callback. Il faut également configurer le moyen d'authentification (password par exemple). Il faut également donner l'url de l'application en WebOrigin}\\

\rem{L'annotation authorize}{Au niveau d'un controller permet de demander l'authentification pour avoir accès à un endpoint donné. Pour faire cela il faut installer micorsoft.AspNetCore.Authentification.JwtBearer. Puis builder.services.AddAuthentification(JwtBearerDefault.AuthenticationScheme)..AddJwtBearer (options => options.Authority = "domainDeAuth0"; options.Audience ="adressDeLAPI"; options.TokenValidationParamaters = new ToeknValidationParameters\{ NameClaimType = ClaimTypes.NameIdentifier\}). On peut utiliser une annotation [AllowAnonymous] pour bypasser l'authorisation. Si ce système est activé il faut spécifier à angular d'utiliser un httpInterceptor : \{allowedList : \{uri ="apiUrl*", tokenOptions \{audience : "adressAPI", scope : "read:current_user" \}\}\}. L'étoile demande une injection de token via header et le scope?=. Attention ces tokesn options ne semblent pas fonctionner correctement. }\\

\note{l'audience dans un token est la liste des appel possibles}

Finalement pour l'API puisse discuter avec un systême elle a aussi besoin d'être passé sous forme d'app dans Auth0. Ici c'est uniquement pour autoriser la validation des tokens par l'api.\\

\section{Sur la gestion des Roles}

\rem{Pour bien gérer les roles}{Il faut passer par une matrice de Role qui lie un role à différente permission sur différente fonctions. Cela force tt de même à gérer les rôles un peu partout dans l'application.}\\

\rem{sur la gestion des dépendances dans angular}{Il est possible de faire un npx npkill (package à installer) pour nettoyer tt les choses installer par un npm install. Cela permet de ne pas laisser node prendre trop de place lorque l'on utlise pas les projets angular.}\\

\rem{Sur les permissions}{Pour gérer les droit d'accès à l'api on passe par les permissions dans les settings de l'API Auth0.}\\

\rem{Pour faire de l'authentification basée sur les Roles}{Dans les settings il faut activer les RBAC dans les Settings de l'API sur Auth0. Puis pour passer automatiquement les permissions lors de la connection (que l'on définit du coté  de l'appli) on doit cocher la case du dessous (Add Permissions in the Access Token). Cela va modifier le scope dans le token d'identification et ajouter un champ permissions qui va contenir les permissions (au lieu d'être dans le scope).}\\

\rem{Sur la gestion des permissions au niveau de l'API}{Il faut dans le builder.Service ajouter un AddAuthorization(o => o.AddPolicy("NomDePolice", policyBuilder => policyBuilder.RequiredAssertion(c => c.User.Identity...))) ou c est le context d'authorisation de la requête. Ici on peut faire un User.HasClaim("permissions", "NomDePermission"). Le context contient égalemenr un champs Ressource qui contien la requête http et donc le path. Si on est restfull on peut extraire le nom de la ressource pour s'en servir lors du check du nom de permission. Il est possible au niveau du builder de donner un AddRequirements pour ajouter en cascade des classes de Requirements spécifique. Attention contrairement à RequiredAssertion on ne peut pas faire de choses génériques avec sa.}\\

\rem{Sur les claim}{Lors de la config de l'autorisation, on peur récupérer les claims qui contiennent en fait le contenue du token d'authentification}

\rem{Sur l'authentification et l'autorisation}{Dans l'API l'authentification permet de gérer quel sont les tokens nécessaire pour l'identification. L'authorisation permet de définir des polices (que l'on peut ensuite appliquer aux controllers) qui vont vérifier certaine condition dans les tokens}

\rem{Sur l'attribut Authorize}{Si on décore un endpoint avec on force l'authentification. Les options que l'on peut donner à authorize permettent de demander des polices d'authorisation spécifiques pour accéder au endpoint (via Authorize(Policy = "MaPoliceAMoi")). Attention tt sa se joue dans le program.cs. Il faut déclarer les UseAuthtentication UseAuthorization dans le bonne ordre (d'abord autentification puis authorisation).}\\

\rem{Sur le type \keyref{https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/params}{params}}{Pour définir un argument de fonction. Cela permet de passer à la suite de params une Array d'un type donnée sans avoir à la passer comme une vrai liste. On peut passer les composants de la liste les uns après les autres dans l'appel de la fonction au lieu d'avoir à construire la liste avant de la passer.}\\

\rem{Sur le AddRequirements}{Il faut lui passer des objets qui implémentent IAuthorizationRequirement. Pour que cette classe fonctionne il faut qu'elle soit accompagné d'une AutorizationHandler<T (T est la classe de Requirement) qui doit implémenter un handle Requirement. Le handler va gérer l alogique de validation. La classe de requirement est là pour recevoir des paramètres au besoin.  Il faut ensuite passer le Handler au service via un AddSingleton ou AddScoped. Attention par défaut si l'on n emet pas de Context.Succeed(requirement) dans le handler le comportement par défaut et d'utiliser un Context.Fail() avant le return Task.Completed. C'est lourd comme méthode mais en définissant un constructeur on peut aussi récupérer via DI la même chose que dans les controlleurs et donc faire de la validation dessus. ATtention à ne pas faire du singleton dans ce cas là.}\\

\rem{Sur l'id et l'acces token}{Access Token : Token qui n'est la que pour gérer le dialog avec une api (avec audience). C'est celui qui est envoyé pour communiquer avec une api. id\_token est à destination des applis. C'est là que l'on a les informations sur les User par exemple (attention ce n'est pas sa qui correspond au raw json que l'on peut voir sur Auth0). }

%%--------------------------------------------------------------------------------------------------------------------------------1
%% Glossaires


\end{document}
\end{document}
